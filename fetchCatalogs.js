require('dotenv').config();
const { fetchJson, categorizeOffers } = require('./src/services/foodComponentToCatalog');
const CatalogController = require('./src/controllers/catalogController');
const fs = require('fs').promises;
const path = require('path');

async function fetchCatalogsAndMatch() {
    console.log('Starting catalog fetch and food component matching process...');
    
    // Initialize the catalog controller
    const catalogController = new CatalogController();
    
    // Step 1: Authenticate with Firebase (if needed)
    if (process.env.FIREBASE_ADMIN_EMAIL && process.env.FIREBASE_ADMIN_PASSWORD) {
        console.log('Authenticating with Firebase...');
        const isAuthenticated = await catalogController.authenticate(
            process.env.FIREBASE_ADMIN_EMAIL,
            process.env.FIREBASE_ADMIN_PASSWORD
        );
        
        if (!isAuthenticated) {
            console.error('Failed to authenticate with Firebase. Continuing without authentication...');
        } else {
            console.log('Authentication successful.');
        }
    }
    
    try {
        // Step 2: Fetch catalog IDs and offers
        console.log('Fetching catalog IDs and offers from Tjek API...');
        const catalogIds = await catalogController.getCatalogIds();
        console.log(`Found ${catalogIds.length} catalogs.`);
        
        // Step 3: Load food components
        console.log('Loading food components...');
        const foodComponents = await fetchJson('./src/data/Foodcomponent.json');
        console.log(`Loaded ${foodComponents.length} food component categories.`);
        
        // Step 4: Load the offers generated by getCatalogIds
        console.log('Loading offers from file...');
        const offers = await fetchJson('./src/data/offers.json');
        console.log(`Loaded ${offers.length} offers.`);
        
        // Step 5: Apply food component matching
        console.log('Applying food component matching algorithm...');
        const matchedOffers = categorizeOffers(offers, foodComponents);
        console.log(`Matched ${matchedOffers.length} offers with food components.`);
        
        // Step 6: Save the results
        const resultsPath = path.join(__dirname, './src/data/matched-offers.json');
        await fs.writeFile(resultsPath, JSON.stringify(matchedOffers, null, 2), 'utf8');
        console.log(`Results saved to: ${resultsPath}`);
        
        // Step 7: Upload to Firebase if authenticated
        if (catalogController.isAuthenticated) {
            console.log('Uploading matched offers to Firebase...');
            try {
                // Clean up existing data first
                await catalogController.removeDataFromFirebase('offers/');
                console.log('Existing offers removed from Firebase.');
                
                // Upload new matched offers
                const filteredOffers = matchedOffers.filter(
                    offer => !offer.categories.includes('Ukendt')
                );
                await catalogController.arrayToFirebase(filteredOffers, 'offers');
                console.log(`Successfully uploaded ${filteredOffers.length} matched offers to Firebase.`);
                
            } catch (error) {
                console.error('Error uploading to Firebase:', error.message);
            }
        }
        
        // Step 8: Generate statistics
        console.log('\nMatching Statistics:');
        
        // Count by category
        const categoryStats = {};
        matchedOffers.forEach(offer => {
            if (offer.categories && offer.categories.length > 0) {
                const primaryCategory = offer.categories[0];
                categoryStats[primaryCategory] = (categoryStats[primaryCategory] || 0) + 1;
            }
        });
        
        // Sort categories by count
        Object.entries(categoryStats)
            .sort((a, b) => b[1] - a[1])
            .forEach(([category, count]) => {
                const percentage = (count / matchedOffers.length * 100).toFixed(1);
                console.log(`${category}: ${count} offers (${percentage}%)`);
            });
        
        // Accuracy stats
        const accuracies = matchedOffers
            .filter(o => o.matchAccuracy > 0)
            .map(o => o.matchAccuracy);
            
        const avgAccuracy = accuracies.length > 0 
            ? (accuracies.reduce((sum, acc) => sum + acc, 0) / accuracies.length).toFixed(1) 
            : 0;
            
        console.log(`\nAverage match accuracy: ${avgAccuracy}%`);
        console.log(`Unmatched offers: ${matchedOffers.filter(o => o.categories[0] === 'Ukendt').length} (${(matchedOffers.filter(o => o.categories[0] === 'Ukendt').length / matchedOffers.length * 100).toFixed(1)}%)`);
        
    } catch (error) {
        console.error('Error in fetch and match process:', error);
    }
    
    console.log('\nProcess completed.');
}

// Run the process
fetchCatalogsAndMatch();